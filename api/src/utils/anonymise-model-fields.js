const applicationSchemaFields = [
  "_id.$oid",
  "apiEngagementId",
  "youngId",
  "youngFirstName",
  "youngLastName",
  "youngEmail",
  "youngBirthdateAt",
  "youngCity",
  "youngDepartment",
  "youngCohort",
  "cohortId",
  "missionId",
  "isJvaMission",
  "missionName",
  "missionDepartment",
  "missionRegion",
  "missionDuration",
  "structureId",
  "tutorId",
  "contractId",
  "contractStatus",
  "tutorName",
  "priority",
  "hidden",
  "status",
  "statusComment",
  "contractAvenantFiles",
  "justificatifsFiles",
  "feedBackExperienceFiles",
  "othersFiles",
  "filesType",
  "createdAt.$date",
  "updatedAt.$date",
];

const cohesionCenterSchemaFields = [
  "_id.$oid",
  "name",
  "code2022",
  "address",
  "city",
  "zip",
  "department",
  "region",
  "addressVerified",
  "placesTotal",
  "pmr",
  "cohorts",
  "cohortIds",
  "academy",
  "typology",
  "domain",
  "complement",
  "centerDesignation",
  "placesLeft",
  "outfitDelivered",
  "observations",
  "waitingList",
  "COR",
  "code",
  "country",
  "departmentCode",
  "sessionStatus",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const contractSchemaFields = [
  "_id.$oid",
  "youngId",
  "structureId",
  "applicationId",
  "missionId",
  "tutorId",
  "isYoungAdult",
  "parent1Token",
  "projectManagerToken",
  "structureManagerToken",
  "parent2Token",
  "youngContractToken",
  "parent1Status",
  "projectManagerStatus",
  "structureManagerStatus",
  "parent2Status",
  "youngContractStatus",
  "parent1ValidationDate.$date",
  "projectManagerValidationDate.$date",
  "structureManagerValidationDate.$date",
  "parent2ValidationDate.$date",
  "youngContractValidationDate",
  "invitationSent",
  "youngFirstName",
  "youngLastName",
  "youngBirthdate",
  "youngAddress",
  "youngCity",
  "youngDepartment",
  "youngEmail",
  "youngPhone",
  "parent1FirstName",
  "parent1LastName",
  "parent1Address",
  "parent1City",
  "parent1Department",
  "parent1Phone",
  "parent1Email",
  "parent2FirstName",
  "parent2LastName",
  "parent2Address",
  "parent2City",
  "parent2Department",
  "parent2Phone",
  "parent2Email",
  "missionName",
  "missionObjective",
  "missionAction",
  "missionStartAt",
  "missionEndAt",
  "missionAddress",
  "missionCity",
  "missionZip",
  "missionDuration",
  "missionFrequence",
  "date",
  "projectManagerFirstName",
  "projectManagerLastName",
  "projectManagerRole",
  "projectManagerEmail",
  "structureManagerFirstName",
  "structureManagerLastName",
  "structureManagerRole",
  "structureManagerEmail",
  "tutorFirstName",
  "tutorLastName",
  "tutorRole",
  "tutorEmail",
  "structureSiret",
  "structureName",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const departmentServiceSchemaFields = [
  "_id.$oid",
  "contacts.cohort",
  "contacts.cohortId",
  "contacts.contactName",
  "contacts.contactPhone",
  "contacts.contactMail",
  "department",
  "region",
  "directionName",
  "serviceName",
  "serviceNumber",
  "address",
  "complementAddress",
  "zip",
  "city",
  "description",
  "contactName",
  "contactPhone",
  "contactMail",
  "representantEtat.firstName",
  "representantEtat.lastName",
  "representantEtat.mobile",
  "representantEtat.email",
  "representantEtat.role",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const meetingPointSchemaFields = [
  "_id.$oid",
  "isValid",
  "cohort",
  "cohortId",
  "busId",
  "busExcelId",
  "centerId",
  "centerCode",
  "departureAddress",
  "departureZip",
  "departureCity",
  "departureDepartment",
  "departureRegion",
  "hideDepartmentInConvocation",
  "departureAt.$date",
  "departureAtString",
  "realDepartureAtString",
  "returnAt.$date",
  "returnAtString",
  "realReturnAtString",
  "createdAt.$date",
  "updatedAt.$date",
  "deletedAt.$date",
  "__v",
];

const missionSchemaFields = [
  "_id.$oid",
  "name",
  "domains",
  "mainDomain",
  "startAt.$date",
  "endAt.$date",
  "duration",
  "format",
  "frequence",
  "period",
  "subPeriod",
  "placesTotal",
  "placesLeft",
  "pendingApplications",
  "actions",
  "description",
  "justifications",
  "contraintes",
  "structureId",
  "structureName",
  "status",
  "visibility",
  "statusComment",
  "hebergement",
  "hebergementPayant",
  "tutorId",
  "tutorName",
  "address",
  "zip",
  "city",
  "department",
  "region",
  "country",
  "location.lat",
  "location.lon",
  "addressVerified",
  "remote",
  "isMilitaryPreparation",
  "createdAt.$date",
  "updatedAt.$date",
  "lastSyncAt.$date",
  "isJvaMission",
  "jvaMissionId",
  "apiEngagementId",
  "jvaRawData",
  "applicationStatus",
  "placesStatus",
  "__v",
];

const missionEquivalenceSchemaFields = [
  "_id.$oid",
  "youngId",
  "status",
  "type",
  "desc",
  "sousType",
  "structureName",
  "address",
  "zip",
  "city",
  "startDate.$date",
  "endDate.$date",
  "frequency.nombre",
  "frequency.duree",
  "frequency.frequence",
  "missionDuration",
  "contactFullName",
  "contactEmail",
  "files",
  "message",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const referentSchemaFields = [
  "_id.$oid",
  "firstName",
  "lastName",
  "email",
  "emailValidatedAt.$date",
  "emailWaitingValidation",
  "password",
  "loginAttempts",
  "token2FA",
  "token2FAExpires.$date",
  "attempts2FA",
  "acceptCGU",
  "lastLoginAt.$date",
  "lastActivityAt.$date",
  "lastLogoutAt.$date",
  "passwordChangedAt.$date",
  "registredAt.$date",
  "nextLoginAttemptIn.$date",
  "forgotPasswordResetToken",
  "forgotPasswordResetExpires.$date",
  "invitationToken",
  "invitationExpires.$date",
  "role",
  "subRole",
  "region",
  "department",
  "structureId",
  "sessionPhase1Id",
  "cohorts",
  "cohortIds",
  "cohesionCenterId",
  "cohesionCenterName",
  "phone",
  "mobile",
  "metadata._id.$oid",
  "deletedAt.$date",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const sessionPhase1SchemaFields = [
  "_id.$oid",
  "cohesionCenterId",
  "cohort",
  "cohortId",
  "department",
  "region",
  "codeCentre",
  "nameCentre",
  "zipCentre",
  "cityCentre",
  "headCenterId",
  "team.firstName",
  "team.lastName",
  "team.role",
  "team.email",
  "team.phone",
  "waitingList",
  "placesTotal",
  "placesLeft",
  "timeScheduleFiles._id",
  "timeScheduleFiles.name",
  "timeScheduleFiles.uploadedAt",
  "timeScheduleFiles.size",
  "timeScheduleFiles.mimetype",
  "hasTimeSchedule",
  "pedagoProjectFiles._id",
  "pedagoProjectFiles.name",
  "pedagoProjectFiles.uploadedAt",
  "pedagoProjectFiles.size",
  "pedagoProjectFiles.mimetype",
  "hasPedagoProject",
  "dateStart.$date",
  "dateEnd.$date",
  "status",
  "sanitaryContactEmail",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const structureSchemaFields = [
  "_id.$oid",
  "name",
  "siret",
  "description",
  "website",
  "facebook",
  "twitter",
  "instagram",
  "status",
  "isNetwork",
  "networkId",
  "networkName",
  "legalStatus",
  "types",
  "sousType",
  "associationTypes",
  "structurePubliqueType",
  "structurePubliqueEtatType",
  "structurePriveeType",
  "address",
  "zip",
  "city",
  "department",
  "region",
  "country",
  "location.lon",
  "location.lat",
  "addressVerified",
  "state",
  "isMilitaryPreparation",
  "isJvaStructure",
  "jvaStructureId",
  "jvaRawData",
  "structureManager.firstName",
  "structureManager.lastName",
  "structureManager.mobile",
  "structureManager.email",
  "structureManager.role",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const waitingListSchemaFields = ["_id.$oid", "zip", "mail", "birthdateAt", "createdAt.$date", "updatedAt.$date"];

const youngSchemaFields = [
  "_id.$oid",
  "firstName",
  "lastName",
  "frenchNationality",
  "birthCountry",
  "birthCity",
  "birthCityZip",
  "email",
  "emailVerified",
  "newEmail",
  "phone",
  "phoneZone",
  "gender",
  "birthdateAt.$date",
  "cohort",
  "cohortId",
  "originalCohort",
  "originalCohortId",
  "cohortChangeReason",
  "cohortDetailedChangeReason",
  "phase",
  "status",
  "statusPhase1",
  "statusPhase1Tmp",
  "statusPhase1Motif",
  "statusPhase1MotifDetail",
  "statusPhase2",
  "statusPhase2updatedAt.$date",
  "statusPhase2OpenedAt.$date",
  "statusPhase2ValidatedAt.$date",
  "statusPhase2Contract",
  "statusPhase3",
  "statusPhase3updatedAt.$date",
  "statusPhase3ValidatedAt.$date",
  "lastStatusAt.$date",
  "withdrawnReason",
  "withdrawnMessage",
  "hasStartedReinscription",
  "reinscriptionStep2023",
  "inscriptionStep2023",
  "inscriptionStep",
  "inscriptionDoneDate.$date",
  "cohesion2020Step",
  "inscriptionCorrectionMessage",
  "inscriptionRefusedMessage",
  "historic",
  "password",
  "token2FA",
  "token2FAExpires.$date",
  "attempts2FA",
  "tokenEmailValidation",
  "tokenEmailValidationExpires.$date",
  "attemptsEmailValidation",
  "loginAttempts",
  "lastLoginAt.$date",
  "lastActivityAt.$date",
  "lastLogoutAt.$date",
  "passwordChangedAt.$date",
  "nextLoginAttemptIn.$date",
  "forgotPasswordResetToken",
  "forgotPasswordResetExpires.$date",
  "invitationToken",
  "invitationExpires.$date",
  "acceptCGU",
  "acceptRI",
  "cniFiles",
  "cohesionStayPresence",
  "presenceJDM",
  "cohesionStayMedicalFileReceived",
  "departInform",
  "departSejourAt.$date",
  "departSejourMotif",
  "departSejourMotifComment",
  "cohesionStayMedicalFileDownload",
  "convocationFileDownload",
  "classeId",
  "etablissementId",
  "source",
  "sessionPhase1Id",
  "sessionPhase1IdTmp",
  "cohesionCenterId",
  "ligneId",
  "meetingPointId",
  "deplacementPhase1Autonomous",
  "transportInfoGivenByLocal",
  "hasMeetingInformation",
  "isTravelingByPlane",
  "codeCenterTmp",
  "busTmp",
  "cohesionCenterName",
  "cohesionCenterZip",
  "cohesionCenterCity",
  "autoAffectationPhase1ExpiresAt.$date",
  "phase2ApplicationStatus",
  "phase2ApplicationFilesType",
  "phase2NumberHoursDone",
  "phase2NumberHoursEstimated",
  "phase3StructureName",
  "phase3MissionDomain",
  "phase3MissionDescription",
  "phase3MissionStartAt.$date",
  "phase3MissionEndAt.$date",
  "phase3TutorFirstName",
  "phase3TutorLastName",
  "phase3TutorEmail",
  "phase3TutorPhone",
  "phase3TutorNote",
  "phase3Token",
  "address",
  "coordinatesAccuracyLevel",
  "complementAddress",
  "zip",
  "city",
  "addressVerified",
  "cityCode",
  "populationDensity",
  "isRegionRural",
  "department",
  "region",
  "country",
  "location.lat",
  "location.lon",
  "qpv",
  "foreignAddress",
  "foreignCity",
  "foreignZip",
  "foreignCountry",
  "situation",
  "grade",
  "schoolCertification",
  "schooled",
  "schoolName",
  "schoolNameOld",
  "schoolType",
  "schoolAddress",
  "schoolComplementAdresse",
  "schoolZip",
  "schoolCity",
  "schoolDepartment",
  "schoolRegion",
  "schoolCountry",
  "schoolLocation.lat",
  "schoolLocation.lon",
  "schoolId",
  "academy",
  "employed",
  "parent1Status",
  "parent1FirstName",
  "parent1LastName",
  "parent1Email",
  "parent1Phone",
  "parent1PhoneZone",
  "parent1OwnAddress",
  "parent1Address",
  "parent1coordinatesAccuracyLevel",
  "parent1ComplementAddress",
  "parent1Zip",
  "parent1City",
  "parent1CityCode",
  "parent1Department",
  "parent1Region",
  "parent1Country",
  "parent1Location.lat",
  "parent1Location.lon",
  "parent1FromFranceConnect",
  "parent1Inscription2023Token",
  "parent1DataVerified",
  "parent1AddressVerified",
  "parent1AllowCovidAutotest",
  "parent1AllowImageRights",
  "parent1ContactPreference",
  "parent2Status",
  "parent2FirstName",
  "parent2LastName",
  "parent2Email",
  "parent2Phone",
  "parent2PhoneZone",
  "parent2OwnAddress",
  "parent2Address",
  "parent2coordinatesAccuracyLevel",
  "parent2ComplementAddress",
  "parent2Zip",
  "parent2City",
  "parent2CityCode",
  "parent2Department",
  "parent2Region",
  "parent2Country",
  "parent2Location.lat",
  "parent2Location.lon",
  "parent2FromFranceConnect",
  "parent2Inscription2023Token",
  "parent2AllowImageRights",
  "parent2AllowImageRightsReset",
  "parent2ContactPreference",
  "hostLastName",
  "hostFirstName",
  "hostRelationship",
  "hostCity",
  "hostZip",
  "hostAddress",
  "hostDepartment",
  "hostRegion",
  "handicap",
  "allergies",
  "handicapInSameDepartment",
  "reducedMobilityAccess",
  "ppsBeneficiary",
  "paiBeneficiary",
  "medicosocialStructure",
  "medicosocialStructureName",
  "medicosocialStructureAddress",
  "medicosocialStructureComplementAddress",
  "medicosocialStructureZip",
  "medicosocialStructureCity",
  "medicosocialStructureDepartment",
  "medicosocialStructureRegion",
  "medicosocialStructureLocation.lat",
  "medicosocialStructureLocation.lon",
  "engagedStructure",
  "sameSchoolCLE",
  "specificAmenagment",
  "specificAmenagmentType",
  "highSkilledActivity",
  "highSkilledActivityInSameDepartment",
  "highSkilledActivityType",
  "highSkilledActivityProofFiles",
  "parentAllowSNU",
  "parent1AllowSNU",
  "parent2AllowSNU",
  "parent1ValidationDate.$date",
  "parent2ValidationDate.$date",
  "parent2RejectSNUComment",
  "dataProcessingConsentmentFiles",
  "parentConsentment",
  "parentConsentmentFiles",
  "parentConsentmentFilesCompliant",
  "parentConsentmentFilesCompliantInfo",
  "consentment",
  "imageRight",
  "imageRightFiles",
  "imageRightFilesStatus",
  "rulesFilesStatus",
  "psc1Info",
  "imageRightFilesComment",
  "autoTestPCR",
  "autoTestPCRFiles",
  "autoTestPCRFilesStatus",
  "autoTestPCRFilesComment",
  "rulesYoung",
  "rulesParent1",
  "rulesParent2",
  "rulesFiles",
  "informationAccuracy",
  "aknowledgmentTerminaleSessionAvailability",
  "parentStatementOfHonorInvalidId",
  "jdc",
  "motivations",
  "domains",
  "professionnalProject",
  "professionnalProjectPrecision",
  "period",
  "periodRanking",
  "mobilityNearSchool",
  "mobilityNearHome",
  "mobilityNearRelative",
  "mobilityNearRelativeName",
  "mobilityNearRelativeAddress",
  "mobilityNearRelativeZip",
  "mobilityNearRelativeCity",
  "mobilityTransport",
  "mobilityTransportOther",
  "missionFormat",
  "engaged",
  "engagedDescription",
  "desiredLocation",
  "militaryPreparationFilesIdentity",
  "militaryPreparationFilesCensus",
  "militaryPreparationFilesAuthorization",
  "militaryPreparationFilesCertificate",
  "statusMilitaryPreparationFiles",
  "militaryPreparationCorrectionMessage",
  "files.cniFiles",
  "files.highSkilledActivityProofFiles",
  "files.dataProcessingConsentmentFiles",
  "files.parentConsentmentFiles",
  "files.imageRightFiles",
  "files.autoTestPCRFiles",
  "files.rulesFiles",
  "files.militaryPreparationFilesIdentity",
  "files.militaryPreparationFilesCensus",
  "files.militaryPreparationFilesAuthorization",
  "files.militaryPreparationFilesCertificate",
  "latestCNIFileExpirationDate.$date",
  "CNIFileNotValidOnStart",
  "latestCNIFileCategory",
  "missionsInMail.missionId",
  "missionsInMail.date.$date",
  "youngPhase1Agreement",
  "status_equivalence",
  "correctionRequests",
  "notes",
  "hasNotes",
  "defenseInterest",
  "defenseTypeInterest",
  "defenseDomainInterest",
  "defenseMotivationInterest",
  "securityInterest",
  "securityDomainInterest",
  "solidarityInterest",
  "healthInterest",
  "educationInterest",
  "cultureInterest",
  "sportInterest",
  "environmentInterest",
  "citizenshipInterest",
  "deletedAt.$date",
  "createdAt.$date",
  "updatedAt.$date",
  "__v",
];

const ligneBusSchemaFields = [
  "_id.$oid",
  "cohort",
  "cohortId",
  "busId",
  "departuredDate.$date",
  "returnDate.$date",
  "youngCapacity",
  "totalCapacity",
  "followerCapacity",
  "youngSeatsTaken",
  "travelTime",
  "lunchBreak",
  "lunchBreakReturn",
  "sessionId",
  "centerId",
  "centerArrivalTime",
  "centerDepartureTime",
  "classeId",
  "meetingPointsIds",
  "team",
  "delayedForth",
  "delayedBack",
  "mergedBusIds",
  "createdAt.$date",
  "updatedAt.$date",
  "deletedAt.$date",
  "__v",
];

const modificationBusSchemaFields = [
  "_id.$oid",
  "cohort",
  "cohortId",
  "lineId",
  "lineName",
  "requestMessage",
  "requestUserId",
  "requestUserName",
  "requestUserRole",
  "tagIds",
  "status",
  "statusUserId",
  "statusUserName",
  "statusDate.$date",
  "opinion",
  "opinionUserId",
  "opinionUserName",
  "opinionDate.$date",
  "messages.message",
  "messages.userId",
  "messages.userName",
  "messages.date.$date",
  "createdAt.$date",
  "updatedAt.$date",
  "deletedAt.$date",
  "__v",
];

function getNestedValue(obj, path) {
  return path.split(".").reduce((acc, part) => acc && acc[part], obj);
}

function setNestedValue(obj, path, value) {
  const keys = path.split(".");
  const lastKey = keys.pop();
  const deepObj = keys.reduce((acc, key) => (acc[key] = acc[key] || {}), obj);
  deepObj[lastKey] = value;
}

function getAllPaths(obj, parentPath = "") {
  let paths = [];
  for (let key in obj) {
    const currentPath = parentPath ? `${parentPath}.${key}` : key;
    if (typeof obj[key] === "object" && obj[key] !== null && !Array.isArray(obj[key])) {
      paths = paths.concat(getAllPaths(obj[key], currentPath));
    } else {
      paths.push(currentPath);
    }
  }
  return paths;
}

function anonymizeNewFields(item, knownFields, schemaFields) {
  const allPaths = getAllPaths(item);

  for (const path of allPaths) {
    if (!knownFields.includes(path) && !schemaFields.includes(path)) {
      const value = getNestedValue(item, path);

      if (Array.isArray(value) && value.length > 0 && typeof value[0] === "object") {
        continue;
      }

      if (value !== undefined) {
        if (Array.isArray(value)) {
          setNestedValue(item, path, []);
        } else if (typeof value === "string") {
          setNestedValue(item, path, "");
        } else {
          setNestedValue(item, path, null);
        }
      }
    }
  }

  console.log("Anonymized Item:", item);
  return item;
}

module.exports = {
  applicationSchemaFields,
  cohesionCenterSchemaFields,
  contractSchemaFields,
  departmentServiceSchemaFields,
  meetingPointSchemaFields,
  missionSchemaFields,
  missionEquivalenceSchemaFields,
  referentSchemaFields,
  sessionPhase1SchemaFields,
  structureSchemaFields,
  waitingListSchemaFields,
  youngSchemaFields,
  ligneBusSchemaFields,
  modificationBusSchemaFields,
  anonymizeNewFields,
};
