import { fakerFR as faker } from "@faker-js/faker";
import { Types } from "mongoose";
const { ObjectId } = Types;
import { addYears } from "date-fns";
import { departmentList, regionList, YoungType } from "snu-lib";

function randomDepartment() {
  const index = Math.floor(Math.random() * departmentList.length);
  return departmentList[index];
}
function randomRegion() {
  const index = Math.floor(Math.random() * regionList.length);
  return regionList[index];
}

export default function getNewYoungFixture(fields: Partial<YoungType> = {}): Partial<YoungType> {
  return {
    firstName: faker.person.firstName(),
    lastName: faker.person.lastName(),
    frenchNationality: "true",
    birthCountry: faker.location.country(),
    birthCity: faker.location.city(),
    birthCityZip: faker.location.zipCode(),
    email: faker.internet.email().toLowerCase(),
    phone: faker.phone.number(),
    phoneZone: "FRANCE",
    gender: faker.person.gender(),
    birthdateAt: faker.date.past({ years: 3, refDate: addYears(new Date(), -15) }),
    cohort: "Juillet 2023",
    acceptCGU: "true",
    phase: "CONTINUE",
    status: "REFUSED",
    statusPhase1: "AFFECTED",
    statusPhase2: "IN_PROGRESS",
    statusPhase3: "VALIDATED",
    statusPhase2UpdatedAt: faker.date.past(),
    statusPhase2ValidatedAt: faker.date.past(),
    statusPhase3UpdatedAt: faker.date.past(),
    statusPhase3ValidatedAt: faker.date.past(),
    lastStatusAt: faker.date.past(),
    withdrawnReason: "",
    withdrawnMessage: "",
    inscriptionStep: "PROFIL",
    cohesion2020Step: "JDC",
    historic: [],
    password: faker.internet.password(),
    cniFiles: [],
    cohesionStayPresence: "true",
    presenceJDM: "true",
    departSejourAt: faker.date.past(),
    departSejourMotif: "blabla",
    departSejourMotifComment: "blabla details",
    cohesionStayMedicalFileReceived: "false",
    cohesionCenterId: "",
    cohesionCenterName: "",
    cohesionCenterZip: "",
    cohesionCenterCity: "",
    autoAffectationPhase1ExpiresAt: faker.date.past(),
    phase2ApplicationStatus: [],
    phase3StructureName: "",
    phase3MissionDomain: "",
    phase3MissionDescription: "",
    phase3MissionStartAt: faker.date.past(),
    phase3MissionEndAt: faker.date.past(),
    phase3TutorFirstName: "",
    phase3TutorLastName: "",
    phase3TutorEmail: "",
    phase3TutorPhone: "",
    phase3TutorNote: "",
    phase3Token: "3",
    address: "",
    complementAddress: "",
    zip: faker.location.zipCode(),
    city: faker.location.city(),
    cityCode: faker.location.zipCode(),
    department: randomDepartment(),
    region: randomRegion(),
    country: "France",
    location: {
      lat: Number(faker.location.latitude()),
      lon: Number(faker.location.longitude()),
    },
    hostLastName: faker.person.lastName(),
    hostFirstName: faker.person.firstName(),
    hostRelationship: "Parent",
    foreignCountry: faker.location.country(),
    foreignCity: faker.location.city(),
    foreignZip: faker.location.zipCode(),
    foreignAddress: "Une super adresse",
    populationDensity: "DENSE",
    qpv: "false",
    situation: "Etudiant",
    grade: "2ndeGT",
    schoolCertification: "false",
    schooled: "true",
    schoolName: faker.location.city(),
    schoolType: "Lyc√©e",
    schoolAddress: faker.location.street(),
    schoolComplementAdresse: "",
    schoolZip: faker.location.zipCode(),
    schoolCity: faker.location.city(),
    schoolDepartment: randomDepartment(),
    schoolRegion: randomRegion(),
    schoolLocation: {
      lat: Number(faker.location.latitude()),
      lon: Number(faker.location.longitude()),
    },
    schoolId: String(faker.number.int()),
    academy: "Strasbourg",
    parent1Status: "",
    parent1FirstName: faker.person.firstName(),
    parent1LastName: faker.person.lastName(),
    parent1Email: faker.internet.email(),
    parent1Phone: faker.phone.number(),
    parent1OwnAddress: "true",
    parent1Address: faker.location.streetAddress(),
    parent1ComplementAddress: "",
    parent1Zip: faker.location.zipCode(),
    parent1City: faker.location.city(),
    parent1Department: randomDepartment(),
    parent1Region: randomRegion(),
    parent1Location: {
      lat: Number(faker.location.latitude()),
      lon: Number(faker.location.longitude()),
    },
    parent1FromFranceConnect: "true",
    parent2Status: "",
    parent2FirstName: faker.person.firstName(),
    parent2LastName: faker.person.lastName(),
    parent2Email: faker.internet.email(),
    parent2Phone: faker.phone.number(),
    parent2OwnAddress: "true",
    parent2Address: faker.location.streetAddress(),
    parent2ComplementAddress: "",
    parent2Zip: faker.location.zipCode(),
    parent2City: faker.location.city(),
    parent2Department: randomDepartment(),
    parent2Region: randomRegion(),
    parent2Location: {
      lat: Number(faker.location.latitude()),
      lon: Number(faker.location.longitude()),
    },
    parent2FromFranceConnect: "false",
    handicap: "true",
    ppsBeneficiary: "false",
    paiBeneficiary: "false",
    medicosocialStructure: "true",
    medicosocialStructureName: faker.location.country(),
    medicosocialStructureAddress: faker.location.streetAddress(),
    medicosocialStructureComplementAddress: "",
    medicosocialStructureZip: faker.location.zipCode(),
    medicosocialStructureCity: faker.location.city(),
    medicosocialStructureDepartment: randomDepartment(),
    medicosocialStructureRegion: randomRegion(),
    medicosocialStructureLocation: {
      lat: Number(faker.location.latitude()),
      lon: Number(faker.location.longitude()),
    },
    engagedStructure: "Maison",
    specificAmenagment: "false",
    specificAmenagmentType: "Aucun",
    highSkilledActivity: "true",
    highSkilledActivityType: "Sport",
    highSkilledActivityProofFiles: [],
    parentConsentment: "true",
    parentConsentmentFiles: [],
    parentConsentmentFilesCompliant: "false",
    parentConsentmentFilesCompliantInfo: "",
    consentment: "false",
    imageRight: "false",
    imageRightFiles: [],
    autoTestPCR: "true",
    autoTestPCRFiles: [],
    rulesYoung: "true",
    rulesParent1: "true",
    rulesParent2: "true",
    rulesFiles: [],
    jdc: "false",
    motivations: "SNU",
    domains: [""],
    professionnalProject: "UNIFORM",
    professionnalProjectPrecision: "",
    period: "DURING_SCHOOL",
    periodRanking: [""],
    mobilityNearSchool: "false",
    mobilityNearHome: "false",
    mobilityNearRelative: "true",
    mobilityNearRelativeName: "",
    mobilityNearRelativeAddress: "",
    mobilityNearRelativeZip: faker.location.zipCode(),
    mobilityTransport: [faker.vehicle.vehicle()],
    mobilityTransportOther: faker.lorem.sentences(),
    missionFormat: "CONTINUOUS",
    engaged: "true",
    engagedDescription: faker.lorem.sentences(),
    desiredLocation: faker.lorem.sentences(),
    defenseInterest: faker.lorem.sentences(),
    defenseTypeInterest: faker.lorem.sentences(),
    defenseDomainInterest: faker.lorem.sentences(),
    defenseMotivationInterest: faker.lorem.sentences(),
    securityInterest: faker.lorem.sentences(),
    securityDomainInterest: faker.lorem.sentences(),
    solidarityInterest: faker.lorem.sentences(),
    healthInterest: faker.lorem.sentences(),
    educationInterest: faker.lorem.sentences(),
    cultureInterest: faker.lorem.sentences(),
    sportInterest: faker.lorem.sentences(),
    environmentInterest: faker.lorem.sentences(),
    citizenshipInterest: faker.lorem.sentences(),
    cohortId: new ObjectId().toString(),
    originalCohortId: new ObjectId().toString(),
    ...fields,
  };
}
