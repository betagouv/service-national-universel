FROM node:20.17-alpine AS base

FROM base AS pruner
WORKDIR /build

ARG APP_NAME

RUN --mount=type=bind,src=.,target=/src \
    --mount=type=cache,target=/root/.npm \
<<EOF
turbo_version=$(cat /src/package-lock.json | grep turbo | head -n 1 | sed 's/"turbo": "\(.*\)"/\1/g')
npm install --global "turbo@$turbo_version"
EOF

RUN --mount=type=bind,src=.,target=/src \
    turbo prune --docker --cwd /src --out-dir /build ${APP_NAME}


FROM base AS builder
WORKDIR /build

ARG APP_NAME

COPY --from=pruner /build/json/ .
RUN mkdir ${APP_NAME}/public
RUN --mount=type=cache,target=/root/.npm \
    npm ci --no-audit --no-fund

ARG ENVIRONMENT
ARG RELEASE

ENV VITE_ENVIRONMENT=${ENVIRONMENT}
ENV VITE_RELEASE=${RELEASE}

COPY --from=pruner /build/full/ .
RUN --mount=type=bind,src=tsconfig.front.json,target=/build/tsconfig.front.json \
    --mount=type=secret,id=BUILD_SECRETS \
<<EOF
    export $(cat /run/secrets/BUILD_SECRETS | xargs)
    npx turbo run build
EOF



FROM nginx

ARG APP_NAME

COPY --from=builder /build/${APP_NAME}/build/ /usr/share/nginx/html

RUN sed -i"" 's#index  index.html index.htm;#index  index.html;\n\ttry_files $uri /index.html;#g' /etc/nginx/conf.d/default.conf
