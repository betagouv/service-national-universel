FROM node:20.17-alpine AS base

FROM base AS pruner
WORKDIR /build

RUN --mount=type=bind,src=.,target=/src \
    --mount=type=cache,target=/root/.npm \
<<EOF
turbo_version=$(cat /src/package-lock.json | grep turbo | head -n 1 | sed 's/"turbo": "\(.*\)"/\1/g')
npm install --global "turbo@$turbo_version"
EOF

RUN --mount=type=bind,src=.,target=/src \
    turbo prune --docker --cwd /src --out-dir /build api apiv2


FROM base AS builder
WORKDIR /build

ARG APP_NAME="api"

COPY --from=pruner /build/json/ .
RUN --mount=type=cache,target=/root/.npm \
    npm ci --no-audit --no-fund

ARG ENVIRONMENT
ARG RELEASE

COPY --from=pruner /build/full/ .
RUN --mount=type=secret,id=BUILD_SECRETS \
<<EOF
    export $(cat /run/secrets/BUILD_SECRETS | xargs)
    npx turbo run build
EOF

COPY patches/ patches/ 
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit dev --workspace api --workspace apiv2 --include-workspace-root



FROM base

RUN apk add --no-cache nginx curl

COPY /devops/build/docker/back/nginx.conf /etc/nginx/http.d/default.conf

WORKDIR /run

COPY --from=builder /build/packages/lib/node_modules/ packages/lib/node_modules/
COPY --from=builder /build/packages/lib/dist/ packages/lib/

COPY --from=builder /build/api/public/ api/public/
COPY --from=builder /build/api/node_modules/ api/node_modules/
COPY --from=builder /build/api/migrations/ api/migrations/
COPY --from=builder /build/api/src/ api/src/

COPY --from=builder /build/apiv2/node_modules/ apiv2/node_modules/
COPY --from=builder /build/apiv2/dist/ apiv2/

COPY --from=builder /build/node_modules/ node_modules/

COPY devops/build/docker/back/package.json package.json
COPY devops/build/docker/back/start-nginx.sh start-nginx.sh
COPY devops/build/docker/back/ecosystem.api.config.js ecosystem.api.config.js
COPY devops/build/docker/back/ecosystem.tasks.config.js ecosystem.tasks.config.js

ENV PORT="8080"
EXPOSE ${PORT}

ARG ENVIRONMENT
ENV ENVIRONMENT=${ENVIRONMENT}
ARG RELEASE
ENV RELEASE=${RELEASE}
ENV NPM_SCRIPT="start"

CMD npm run $NPM_SCRIPT
