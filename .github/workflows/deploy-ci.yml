name: Build and deploy CI

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      image_tag: ${{ steps.image_tag.outputs.image_tag }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}

      - name: Get last commit sha
        id: commit_sha
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: Get image tag
        id: image_tag
        uses: ./.github/actions/get_image_tag
        with:
          sha: ${{ steps.commit_sha.outputs.commit_sha }}

  run_tests_api:
    needs: prepare
    uses: ./.github/workflows/run-tests-api.yml
    with:
      branch_name: ${{ needs.prepare.outputs.target_branch }}
    secrets: inherit

  build:
    needs: [prepare, run_tests_api]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app_name: [admin, api, app]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - name: Check if image exists
        id: check
        uses: ./.github/actions/check_docker_image_tag
        continue-on-error: true
        with:
          registry: ${{ secrets.SCW_CI_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app_name }}
          image_tag: ${{ needs.prepare.outputs.image_tag }}
          secret_key: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}

      - name: Docker Build & Publish
        uses: ./.github/actions/build_docker_image
        if: ${{ ! steps.check.output.tag_id }}
        with:
          username: nologin
          password: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
          registry: ${{ secrets.SCW_CI_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app_name }}
          dockerfile_path: ${{ matrix.app_name }}/Dockerfile
          image_tag: ${{ needs.prepare.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    concurrency:
      group: ${{ github.workflow }}
      cancel-in-progress: false
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_CI_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_CI_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_CI_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_CI_BACKEND_PASSWORD }}
      ci_directory: ./terraform/environments/ci

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.ci_directory }}
        run: terraform init

      - name: Validate terraform
        working-directory: ${{ env.ci_directory }}
        run: terraform validate -no-color

      - name: Terraform plan
        working-directory: ${{ env.ci_directory }}
        run: |
          terraform plan -no-color -input=false -out=ci.tfplan \
            -var="image_tag=${{ needs.prepare.outputs.image_tag }}"

      - name: Terraform auto-apply
        working-directory: ${{ env.ci_directory }}
        run: terraform apply -no-color -input=false -auto-approve ci.tfplan
