name: Build and deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - release_candidate
      - stack-tf-prod # TODO : remove

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'release_candidate' || github.ref_name == 'stack-tf-prod' # TODO : remove
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      image_tag: 'cfeb8db4' # ${{ steps.image_tag.outputs.image_tag }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}

      - name: Get last commit sha
        id: commit_sha
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: Get image tag
        id: image_tag
        uses: ./.github/actions/get_image_tag
        with:
          sha: ${{ steps.commit_sha.outputs.commit_sha }}

  # copy_image:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       app_name: [admin, api, app]

  #   steps:
  #     - name: Login to Production registry
  #       uses: docker/login-action@v2
  #       with:
  #         username: nologin
  #         password: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
  #         registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}

  #     - name: Check if image already exists
  #       id: check_image
  #       shell: bash
  #       run: |
  #         if docker pull ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }} ; then
  #           echo "image_exists=1" >> $GITHUB_OUTPUT
  #         else
  #           echo "image_exists=0" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Pull CI image
  #       if: steps.check_image.outputs.image_exists == '0'
  #       run: docker pull ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }}

  #     - name: Tag Production image (commit sha)
  #       if: steps.check_image.outputs.image_exists == '0'
  #       run: |
  #         docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }} \
  #           ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }}

  #     - name: Tag Production image (latest)
  #       if: steps.check_image.outputs.image_exists == '0'
  #       run: |
  #         docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }} \
  #           ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}:latest

  #     - name: Push Production image
  #       if: steps.check_image.outputs.image_exists == '0'
  #       run: docker push --all-tags ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}

  deploy:
    runs-on: ubuntu-latest
    # needs: [prepare, copy_image]
    needs: prepare
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}
      prod_directory: ./terraform/environments/production

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Get Prod outputs
        id: prod_outputs
        working-directory: ${{ env.prod_directory }}
        run: |
          echo "prod_image_tag=$(terraform output -raw prod_image_tag)" >> $GITHUB_OUTPUT
          echo "staging_admin_endpoint=$(terraform output -raw staging_admin_endpoint)" >> $GITHUB_OUTPUT
          echo "staging_api_endpoint=$(terraform output -raw staging_api_endpoint)" >> $GITHUB_OUTPUT
          echo "staging_app_endpoint=$(terraform output -raw staging_app_endpoint)" >> $GITHUB_OUTPUT
          echo "prod_admin_endpoint=$(terraform output -raw prod_admin_endpoint)" >> $GITHUB_OUTPUT
          echo "prod_api_endpoint=$(terraform output -raw prod_api_endpoint)" >> $GITHUB_OUTPUT
          echo "prod_app_endpoint=$(terraform output -raw prod_app_endpoint)" >> $GITHUB_OUTPUT

      # - name: Staging - Terraform plan
      #   working-directory: ${{ env.prod_directory }}
      #   run: |
      #     terraform plan -no-color -input=false -out=staging.tfplan \
      #       -var="staging_image_tag=${{ needs.prepare.outputs.image_tag }}" \
      #       -var="prod_image_tag=${{ steps.prod_outputs.outputs.prod_image_tag }}"

      # - name: Staging - Terraform auto-apply
      #   working-directory: ${{ env.prod_directory }}
      #   run: |
      #     terraform apply -no-color -input=false -auto-approve staging.tfplan

      # - name: Staging - Healthchecks
      #   run: |
      #     curl -I ${{ steps.prod_outputs.outputs.staging_api_endpoint }} &&
      #       curl -I ${{ steps.prod_outputs.outputs.staging_admin_endpoint }} &&
      #       curl -I ${{ steps.prod_outputs.outputs.staging_app_endpoint }}

      # - name: Production - Terraform plan
      #   working-directory: ${{ env.prod_directory }}
      #   run: |
      #     terraform plan -no-color -input=false -out=prod.tfplan \
      #       -var="staging_image_tag=${{ needs.prepare.outputs.image_tag }}" \
      #       -var="prod_image_tag=${{ needs.prepare.outputs.image_tag }}"

      # - name: Production - Terraform auto-apply
      #   working-directory: ${{ env.prod_directory }}
      #   run: terraform apply -no-color -input=false -auto-approve prod.tfplan

      - name: Production - Healthchecks
        run: |
          curl -I ${{ steps.prod_outputs.outputs.prod_api_endpoint }} &&
            curl -I ${{ steps.prod_outputs.outputs.prod_admin_endpoint }} &&
            curl -I ${{ steps.prod_outputs.outputs.prod_app_endpoint }}

  merge_branch:
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    env:
      production_branch: "test3-production" # TODO "production"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.production_branch }}

      - name: Pull & merge RC into production
        run: git pull origin ${{ needs.prepare.outputs.target_branch }} --ff-only

      - name: Push production
        run: git push origin ${{ env.production_branch }}
