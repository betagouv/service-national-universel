name: Build and deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - release_candidate

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  prod_directory: ./terraform/environments/production
  staging_directory: ./terraform/environments/production/staging
  production_branch: "production"

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'release_candidate'
    env:
      ci_branch: "main"
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      image_tag: ${{ steps.image_tag.outputs.image_tag }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}

      - name: Get last commit sha
        id: commit_sha
        run: |
          commit_sha=$(git rev-parse HEAD)
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: Get image tag
        id: image_tag
        uses: ./.github/actions/get_image_tag
        with:
          sha: ${{ steps.commit_sha.outputs.commit_sha }}

      - name: Check differences
        run: |
          git fetch origin ${{ env.ci_branch }}
          diff=$(git --no-pager diff --no-patch --raw origin/${{ env.ci_branch }})
          if [[ "$diff" ]]
          then
            echo "https://github.com/betagouv/service-national-universel/compare/${{ env.ci_branch }}...${{ steps.target_branch.outputs.target_branch }}"
            echo "$diff"
          else
            echo "No difference with ${{ env.ci_branch }} branch. Aborting"
            exit 1
          fi

      - name: Check mergeability
        run: |
          git fetch origin ${{ env.production_branch }}
          git switch ${{ env.production_branch }}
          git merge --ff-only ${{ steps.target_branch.outputs.target_branch }}


  copy_image:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app_name: [admin, api, app]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - name: Check if image exists
        id: check
        uses: ./.github/actions/check_docker_image_tag
        with:
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app_name }}
          image_tag: ${{ needs.prepare.outputs.image_tag }}
          secret_key: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}

      - name: Login to Production registry
        uses: docker/login-action@v2
        if: steps.check.outputs.tag_exists == 0
        with:
          username: nologin
          password: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}

      - name: Pull CI image
        if: steps.check.outputs.tag_exists == 0
        run: docker pull ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }}

      - name: Tag Production image (commit sha)
        if: steps.check.outputs.tag_exists == 0
        run: |
          docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }} \
            ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }}

      - name: Tag Production image (latest)
        if: steps.check.outputs.tag_exists == 0
        run: |
          docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app_name }}:${{ needs.prepare.outputs.image_tag }} \
            ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}:latest

      - name: Push Production image
        if: steps.check.outputs.tag_exists == 0
        run: docker push --all-tags ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app_name }}

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [prepare, copy_image]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.staging_directory }}
        run: terraform init

      - name: Staging - Terraform plan
        id: plan
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="image_tag=${{ needs.prepare.outputs.image_tag }}"

      - name: Staging - Terraform auto-apply
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="image_tag=${{ needs.prepare.outputs.image_tag }}"

      - name: Staging - Healthcheck API
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Staging - Healthcheck Admin
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Staging - Healthcheck App
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  plan_production:
    runs-on: ubuntu-latest
    needs: [prepare, deploy_staging]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform plan
        id: plan
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="image_tag=${{ needs.prepare.outputs.image_tag }}"

  deploy_production:
    runs-on: ubuntu-latest
    environment: production # Needed for manual approval before deploy
    needs: [prepare, plan_production]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform apply
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="image_tag=${{ needs.prepare.outputs.image_tag }}"

      - name: Production - Healthcheck API
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Production - Healthcheck Admin
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Production - Healthcheck App
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  merge_branch:
    runs-on: ubuntu-latest
    needs: [prepare, deploy_production]
    env:
      hotfix_branch: "production_hotfix"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.production_branch }}

      - name: Pull & merge RC into production
        run: git pull origin ${{ needs.prepare.outputs.target_branch }} --ff-only

      - name: Push production
        run: git push origin ${{ env.production_branch }}

      - name: Remove RC branch
        run: git push origin --delete ${{ needs.prepare.outputs.target_branch }}

      - name: Check if hotfix branch exists
        id: check
        continue-on-error: true
        run: |
          if git fetch origin ${{ env.hotfix_branch }} --prune ; then
            echo "branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing hotfix branch
        if: steps.check.outputs.branch_exists == '1'
        run: git push origin --delete ${{ env.hotfix_branch }}

      - name: Create hotfix branch from production
        run: git checkout -b ${{ env.hotfix_branch }}

      - name: Push hotfix branch
        run: git push origin ${{ env.hotfix_branch }}
