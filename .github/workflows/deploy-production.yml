name: Build and deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - release_candidate

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  prod_directory: ./terraform/environments/production
  staging_directory: ./terraform/environments/production/staging
  production_branch: "production"

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'release_candidate'
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      api_image_tag: ${{ steps.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ steps.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ steps.prepare.outputs.app_image_tag }}
      antivirus_image_tag: ${{ steps.prepare.outputs.antivirus_image_tag }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}
          fetch-depth: 0

      - name: Check differences
        run: |
          git fetch origin ${{ env.production_branch }}
          diff=$(git --no-pager diff --no-patch --raw origin/${{ env.production_branch }})
          if [[ "$diff" ]]
          then
            echo "https://github.com/betagouv/service-national-universel/compare/${{ env.production_branch }}...${{ steps.target_branch.outputs.target_branch }}"
            echo "$diff"
          else
            echo "No difference with ${{ env.production_branch }} branch. Aborting"
            exit 1
          fi

      # - name: Check mergeability
      #   run: |
      #     git fetch origin ${{ env.production_branch }}
      #     git switch ${{ env.production_branch }}
      #     git merge --ff-only ${{ steps.target_branch.outputs.target_branch }}

      - name: Prepare
        id: prepare
        run : |
          api_image_tag=$(git log --max-count=1 --oneline -- api packages | cut -d " " -f 1)
          echo "api_image_tag: $api_image_tag"
          echo "api_image_tag=$api_image_tag" >> $GITHUB_OUTPUT

          admin_image_tag=$(git log --max-count=1 --oneline -- admin packages | cut -d " " -f 1)
          echo "admin_image_tag: $admin_image_tag"
          echo "admin_image_tag=$admin_image_tag" >> $GITHUB_OUTPUT

          app_image_tag=$(git log --max-count=1 --oneline -- app packages | cut -d " " -f 1)
          echo "app_image_tag: $app_image_tag"
          echo "app_image_tag=$app_image_tag" >> $GITHUB_OUTPUT

          antivirus_image_tag=$(git log --max-count=1 --oneline -- antivirus | cut -d " " -f 1)
          echo "antivirus_image_tag: $antivirus_image_tag"
          echo "antivirus_image_tag=$antivirus_image_tag" >> $GITHUB_OUTPUT

          git fetch origin release_candidate production

          rc_sha=$(git rev-parse origin/release_candidate)
          echo "rc_sha: $rc_sha"
          echo "rc_sha=$rc_sha" >> $GITHUB_OUTPUT

          production_sha=$(git rev-parse origin/production)
          echo "production_sha: $production_sha"
          echo "production_sha=$production_sha" >> $GITHUB_OUTPUT

      - name: Changelog
        id: changelog
        run : |
          echo "<https://github.com/betagouv/service-national-universel/compare/${{ steps.prepare.outputs.production_sha }}...${{ steps.prepare.outputs.rc_sha }}|Release du $(date -Idate)>" > CHANGELOG.md
          git log --pretty="• %s" "${{ steps.prepare.outputs.production_sha }}...${{ steps.prepare.outputs.rc_sha }}" \
            | grep --invert-match "chore(release): version" \
            | sort \
            | sed 's #\([0-9]*\) <https://github.com/betagouv/service-national-universel/pull/\1|#\1> g' \
            >> CHANGELOG.md
          cat CHANGELOG.md
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Post Changelog on slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: '#dev-release,#nouveauté-produit'
          slack-message: "${{ steps.changelog.outputs.changelog }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}



  copy_image:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [
          {name: api, tag: "${{needs.prepare.outputs.api_image_tag}}" },
          {name: app, tag: "${{needs.prepare.outputs.app_image_tag}}" },
          {name: admin, tag: "${{needs.prepare.outputs.admin_image_tag}}" },
          {name: antivirus, tag: "${{needs.prepare.outputs.antivirus_image_tag}}" },
        ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - name: Check if image exists
        id: check
        uses: ./.github/actions/check_docker_image_tag
        with:
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app.name }}
          image_tag: ${{ matrix.app.tag }}
          secret_key: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}

      - name: Login to Production registry
        uses: docker/login-action@v2
        if: steps.check.outputs.tag_exists == 0
        with:
          username: nologin
          password: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}

      - name: Pull CI image
        if: steps.check.outputs.tag_exists == 0
        run: docker pull ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app.name }}:${{ matrix.app.tag }}

      - name: Tag Production image (commit sha)
        if: steps.check.outputs.tag_exists == 0
        run: |
          docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app.name }}:${{ matrix.app.tag }} \
            ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app.name }}:${{ matrix.app.tag }}

      - name: Tag Production image (latest)
        if: steps.check.outputs.tag_exists == 0
        run: |
          docker tag ${{ secrets.SCW_CI_IMAGE_REGISTRY }}/${{ matrix.app.name }}:${{ matrix.app.tag }} \
            ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app.name }}:latest

      - name: Push Production image
        if: steps.check.outputs.tag_exists == 0
        run: docker push --all-tags ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}/${{ matrix.app.name }}

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [prepare, copy_image]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.staging_directory }}
        run: terraform init

      - name: Staging - Terraform plan
        id: plan
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}"

      - name: Staging - Terraform auto-apply
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}"

      - name: Staging - Healthcheck API
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Staging - Healthcheck Admin
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Staging - Healthcheck App
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  plan_production:
    runs-on: ubuntu-latest
    needs: [prepare, deploy_staging]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform plan
        id: plan
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}" \
            -var="antivirus_image_tag=${{ needs.prepare.outputs.antivirus_image_tag }}"

  deploy_production:
    runs-on: ubuntu-latest
    environment: production # Needed for manual approval before deploy
    needs: [prepare, plan_production]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform apply
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}" \
            -var="antivirus_image_tag=${{ needs.prepare.outputs.antivirus_image_tag }}"

      - name: Production - Healthcheck API
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Production - Healthcheck Admin
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Production - Healthcheck App
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  deploy_cc:
    needs: [prepare, copy_image]
    if: ${{ vars.DEPLOY_ON_CC == 'true' }}
    uses: ./.github/workflows/cc-deploy-production.yml
    with:
      api_image_tag: ${{ needs.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ needs.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ needs.prepare.outputs.app_image_tag }}
    secrets: inherit

  merge_branch:
    runs-on: ubuntu-latest
    needs: [prepare, deploy_production]
    env:
      hotfix_branch: "production_hotfix"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.production_branch }}

      - name: Pull & merge RC into production
        run: git pull origin ${{ needs.prepare.outputs.target_branch }} --ff-only

      - name: Push production
        run: git push origin ${{ env.production_branch }}

      - name: Remove RC branch
        run: git push origin --delete ${{ needs.prepare.outputs.target_branch }}

      - name: Check if hotfix branch exists
        id: check
        continue-on-error: true
        run: |
          if git fetch origin ${{ env.hotfix_branch }} --prune ; then
            echo "branch_exists=1" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=0" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing hotfix branch
        if: steps.check.outputs.branch_exists == '1'
        run: git push origin --delete ${{ env.hotfix_branch }}

      - name: Create hotfix branch from production
        run: git checkout -b ${{ env.hotfix_branch }}

      - name: Push hotfix branch
        run: git push origin ${{ env.hotfix_branch }}
