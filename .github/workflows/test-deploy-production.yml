name: Test and deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  PROD_ENV_NAME: production

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      prod_registry: ${{ steps.registry.outputs.prod_registry }}
      build_matrix: ${{ steps.config.outputs.build }}
      deploy_matrix: ${{ steps.config.outputs.deploy }}
      test_matrix: ${{ steps.config.outputs.test }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Get registry
        id: registry
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
        run: |
          prod_registry=$(node get-docker-registry.js ${{ env.PROD_ENV_NAME }})
          echo "prod_registry: $prod_registry"
          echo "prod_registry=$prod_registry" >> $GITHUB_OUTPUT

      - name: Get matrices configuration
        id: config
        run: |
          # BUILD MATRIX
          echo "[]" \
          | jq  '. + [{name:"api", image: "api", remote: "CLEVER_CLOUD_GIT_REMOTE_API_DOCKER", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- api packages/lib package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"apiv2", image: "apiv2", remote: "CLEVER_CLOUD_GIT_REMOTE_APIV2_DOCKER", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- apiv2 packages/lib package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"app", image: "app", remote: "CLEVER_CLOUD_GIT_REMOTE_APP_DOCKER", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- app packages package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"admin", image: "admin", remote: "CLEVER_CLOUD_GIT_REMOTE_ADMIN_DOCKER", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- admin packages package-lock.json | cut -d " " -f 1)" > build.json

          echo "Build matrix"
          cat build.json
          echo "build=$(jq -c < build.json)" >> $GITHUB_OUTPUT

          # DEPLOY MATRIX
          cat build.json \
          | jq '. + [{name:"tasks", image: "api", tag:.[]|select(.name == "api")|.tag, remote: "CLEVER_CLOUD_GIT_REMOTE_TASKS_DOCKER"}]' \
          | jq '. + [{name:"tasksv2", image: "apiv2", tag:.[]|select(.name == "apiv2")|.tag, remote: "CLEVER_CLOUD_GIT_REMOTE_TASKSV2_DOCKER"}]' > deploy.json

          echo "Deploy matrix"
          cat deploy.json
          echo "deploy=$(jq -c < deploy.json)" >> $GITHUB_OUTPUT

          # TEST MATRIX
          echo "[]" \
          | jq  '. + [{name:"api"}]' \
          | jq  '. + [{name:"apiv2"}]' \
          | jq  '. + [{name:"app"}]' \
          | jq  '. + [{name:"admin"}]' \
          | jq  '. + [{name:"lib"}]' > test.json

          echo "Test matrix"
          cat test.json
          echo "test=$(jq -c < test.json)" >> $GITHUB_OUTPUT

      - name: Changelog
        id: changelog
        env:
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_SECRET_KEY: ${{ secrets.NOTION_SECRET_KEY }}
        run: |
          devops/scripts/generate_changelog.sh "${{ github.event.before }}...${{ github.event.after }}" > CHANGELOG.md
          cat CHANGELOG.md
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Post Changelog on slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: "#dev-release,#mr-robot"
          slack-message: "${{ steps.changelog.outputs.changelog }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Run tests
        uses: jenseng/dynamic-uses@v1
        with:
          uses: ./.github/actions/run-tests-${{matrix.app.name}}
          with: '{"branch_name": "${{ github.ref_name }}", "CC_TEST_REPORTER_ID": "${{ secrets.CC_TEST_REPORTER_ID }}" }'

  deploy_staging:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install clever-tools
        run: npm install -g clever-tools

      - name: Merge production in deploy-staging
        run: git push --force origin HEAD:deploy-staging

      - name: Watch deployment
        env:
          ORGANIZATION_ID: ${{ vars.CC_ORGANIZATION_ID }}
          APPLICATION_ID: ${{ vars.CC_APP_ID_STAGING_SNU_ALL }}
          CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }}
          CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }}
        run: ./devops/scripts/cc-watch-deploy.sh
  
  deploy_production:
    environment: production
    if: ${{ vars.DEPLOY_ON_CC == 'true' }} # TODO : Remove
    needs: deploy_staging
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Merge production in deploy-production
        run: git push --force origin HEAD:deploy-production

  watch_production_deployment:
    environment: production
    needs: deploy_production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app_id:
          [
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_API }}",
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_APIV2 }}",
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_APP }}",
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_ADMIN }}",
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_TASKS }}",
            "${{ vars.CC_APP_ID_PRODUCTION_SNU_TASKSV2 }}",
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Install clever-tools
        run: npm install -g clever-tools

      - name: Watch deployment
        env:
          ORGANIZATION_ID: ${{ vars.CC_ORGANIZATION_ID }}
          APPLICATION_ID: ${{ matrix.app_id }}
          CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }}
          CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }}
        run: ./devops/scripts/cc-watch-deploy.sh

  build_production_docker:  # TODO : Remove
    needs: [prepare, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Login to Docker Container Registry
        uses: docker/login-action@v2
        with:
          username: nologin
          password: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
          registry: ${{ needs.prepare.outputs.prod_registry }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Build image
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
        run: |
          node build-application-docker.js --push ${{ env.PROD_ENV_NAME }} ${{matrix.app.name}} ${{matrix.app.tag}}

  deploy_production_docker:  # TODO : Remove
    environment: production
    needs: [prepare, deploy_staging, build_production_docker]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.deploy_matrix) }}

    steps:
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          sudo chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod go-rwx ~/.ssh/id_ed25519
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Push
        env:
          CLEVER_CLOUD_GIT_REMOTE: ${{ secrets[matrix.app.remote] }}
        run: |
          mkdir docker
          cd docker
          image_tag=${{ needs.prepare.outputs.prod_registry }}/${{ matrix.app.image }}:${{ matrix.app.tag }}
          echo "FROM $image_tag" > Dockerfile
          git init
          git config user.email "github.deployer@gmail.com"
          git config user.name "Github Deployer"
          git remote add cloud "$CLEVER_CLOUD_GIT_REMOTE"
          git add -A
          git commit -m "For deploy"
          git push -f -u cloud master
