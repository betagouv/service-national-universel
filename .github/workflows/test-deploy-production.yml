name: Test and deploy Production

on:
  workflow_dispatch:
  push:
    branches:
      - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  PROD_ENV_NAME: production

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.config.outputs.test }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Get matrices configuration
        id: config
        run: |
          # TEST MATRIX
          echo "[]" \
          | jq  '. + [{name:"api"}]' \
          | jq  '. + [{name:"apiv2"}]' \
          | jq  '. + [{name:"app"}]' \
          | jq  '. + [{name:"admin"}]' \
          | jq  '. + [{name:"lib"}]' > test.json

          echo "Test matrix"
          cat test.json
          echo "test=$(jq -c < test.json)" >> $GITHUB_OUTPUT

      - name: Changelog
        id: changelog
        env:
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_SECRET_KEY: ${{ secrets.NOTION_SECRET_KEY }}
        run: |
          devops/scripts/generate_changelog.sh "${{ github.event.before }}...${{ github.event.after }}" > CHANGELOG.md
          cat CHANGELOG.md
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Post Changelog on slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: "#dev-release,#mr-robot"
          slack-message: "${{ steps.changelog.outputs.changelog }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Run tests
        uses: jenseng/dynamic-uses@v1
        with:
          uses: ./.github/actions/run-tests-${{matrix.app.name}}
          with: '{"branch_name": "${{ github.ref_name }}", "CC_TEST_REPORTER_ID": "${{ secrets.CC_TEST_REPORTER_ID }}" }'

  deploy_staging:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install clever-tools
        run: npm install -g clever-tools

      - name: Merge production in deploy-staging
        run: git push --force origin HEAD:deploy-staging

      - name: Watch deployment
        env:
          CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }}
          CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }}
        run: ./devops/scripts/cc-watch-deploy.sh ${{ vars.CC_ORGANIZATION_ID }} ${{ vars.CC_APP_ID_STAGING_SNU_ALL }} ${{ github.sha }}
  
  deploy_production:
    environment: production
    needs: deploy_staging
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Merge production in deploy-production
        run: git push --force origin HEAD:deploy-production

      - name: Install clever-tools
        run: npm install -g clever-tools

      - name: Watch deployments
        env:
          CLEVER_TOKEN: ${{ secrets.CLEVER_TOKEN }}
          CLEVER_SECRET: ${{ secrets.CLEVER_SECRET }}
        run: |
          while read row; do
            ./devops/scripts/cc-watch-deploy.sh  ${{ vars.CC_ORGANIZATION_ID }} $row ${{ github.sha }} &
          done <<EOF
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_API }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_APIV2 }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_APP }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_ADMIN }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_TASKS }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNU_TASKSV2 }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNUPPORT_API }}
          ${{ vars.CC_APP_ID_PRODUCTION_SNUPPORT_APP }}
          EOF

          wait
