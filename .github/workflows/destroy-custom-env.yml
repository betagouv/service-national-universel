name: Destroy custom environment

on:
  pull_request:
    types:
      - closed
    branches:
      - main


jobs:

  prepare:
    if:  contains(github.head_ref, '-ci-') || startsWith(github.head_ref, 'ci-') || endsWith(github.head_ref, '-ci')
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}
      env_name: ${{ steps.env_name.outputs.env_name }}

    steps:
    - name: Check branch name
      run: |
        if [[ ${{ github.head_ref }} == 'main' ]] || [[ ${{ github.head_ref }} == 'production' ]] ; then
          echo "This action is not available on the branch ${{ github.head_ref }}"
          exit 1
        fi

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Get custom-env name
      id: env_name
      uses: ./.github/actions/get_custom_env_name
      with:
        branch_name: ${{ github.head_ref }}

  destroy:
    runs-on: ubuntu-latest
    needs: [prepare]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_CI_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_CI_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_CI_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_CI_BACKEND_PASSWORD }}
      custom_directory: ./terraform/environments/ci/custom
      var_file: "vars/main.tfvars.json"

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: hashicorp/setup-terraform@v3

      - name: Create custom env stack
        working-directory: ${{ env.custom_directory }}
        run: sed "s|###___ENV_NAME___###|${{ needs.prepare.outputs.env_name }}|g" main.tf.template > main.tf

      - name: Create var files
        working-directory: ${{ env.custom_directory }}
        run: cp ${{ env.var_file }}.template ${{ env.var_file }}

      - name: Init terraform
        working-directory: ${{ env.custom_directory }}
        run: terraform init

      - name: Validate terraform
        working-directory: ${{ env.custom_directory }}
        run: terraform validate -no-color

      - name: Terraform destroy
        working-directory: ${{ env.custom_directory }}
        run: terraform apply -no-color -input=false -auto-approve -destroy -var-file="${{ env.var_file }}"
