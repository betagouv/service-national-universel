name: Build and deploy Production (Clever Cloud)

on:
  workflow_dispatch:
  push:
    branches:
      - 2068-deploy-cc # TODO: update
      - production_cc

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'production_cc' || github.ref_name == '2068-deploy-cc' # TODO: update
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      api_image_tag: ${{ steps.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ steps.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ steps.prepare.outputs.app_image_tag }}
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Prepare
        id: prepare
        working-directory: ${{ env.prod_directory }}
        env:
          PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
          PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
          PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}
          prod_directory: ./terraform/environments/production
        run: |
          terraform init
          output=$(terraform output -json)

          api_image_tag=$(jq -r '.api_image_tag.value' <<< $output)
          echo "api_image_tag: $api_image_tag"
          echo "api_image_tag=$api_image_tag" >> $GITHUB_OUTPUT

          admin_image_tag=$(jq -r '.admin_image_tag.value' <<< $output)
          echo "admin_image_tag: $admin_image_tag"
          echo "admin_image_tag=$admin_image_tag" >> $GITHUB_OUTPUT

          app_image_tag=$(jq -r '.app_image_tag.value' <<< $output)
          echo "app_image_tag: $app_image_tag"
          echo "app_image_tag=$app_image_tag" >> $GITHUB_OUTPUT

  deploy_image:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: api
            tag: ${{needs.prepare.outputs.api_image_tag}}
            remote: CLEVER_CLOUD_GIT_REMOTE_API_DOCKER
          - name: acc
            tag: ${{needs.prepare.outputs.app_image_tag}}
            remote: CLEVER_CLOUD_GIT_REMOTE_APP_DOCKER
          - name: admin
            tag: ${{needs.prepare.outputs.admin_image_tag}}
            remote: CLEVER_CLOUD_GIT_REMOTE_ADMIN_DOCKER

    steps:
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          sudo chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod go-rwx ~/.ssh/id_ed25519
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}


      - name: Push
        env:
          CLEVER_CLOUD_GIT_REMOTE: ${{ secrets[matrix.remote] }}
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}
        run: |
          mkdir docker
          cd docker
          image_tag=${{ env.registry }}/${{ matrix.name }}:${{ matrix.tag }}
          echo "FROM $image_tag"> Dockerfile
          git init
          git config user.email "github.deployer@gmail.com"
          git config user.name "Github Deployer"
          git remote add cloud "$CLEVER_CLOUD_GIT_REMOTE"
          git add -A
          git commit -m "For deploy"
          git push -f -u cloud master
