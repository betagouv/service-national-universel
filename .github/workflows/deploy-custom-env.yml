name: Custom environment - Build Docker image & Deploy Scaleway

on:
  workflow_dispatch:
  push:
    branches:
      - feat-1469

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      image_tag: "2023-12-11-1de70e4" # TODO ${{ steps.image_tag.outputs.image_tag }}
      env_name: ${{ steps.env_name.outputs.env_name }}

    steps:
    - uses: actions/checkout@v4

    - name: Get image tag
      id: image_tag
      uses: ./.github/actions/get_image_tag

    - name: Get environment name
      id: env_name
      run: |
        env_name=$(echo ${{ github.ref_name }} | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-' | tr -s '-' | cut -c 1-25)
        echo "Environment name: $env_name"
        echo "env_name=$env_name" >> $GITHUB_OUTPUT

  # build:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       app_name: [admin, api, app]

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Docker Build & Publish
  #       uses: ./.github/actions/build_docker_image
  #       with:
  #         username: nologin
  #         password: ${{ secrets.SCW_DEV_DEPLOY_SECRET_KEY }}
  #         registry: ${{ secrets.SCW_DEV_IMAGE_REGISTRY }}
  #         image_name: ${{ matrix.app_name }}
  #         dockerfile_path: ${{ matrix.app_name }}/Dockerfile
  #         image_tag: ${{ needs.prepare.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare]
    # needs: [prepare, build]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_DEV_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_DEV_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_DEV_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_DEV_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_DEV_BACKEND_PASSWORD }}
      custom_directory: ./terraform/environments/development/custom
      var_file: "vars/main.tfvars.json"
      image_tag: "2023-12-11-1de70e4"
      scw_endpoint: "https://api.scaleway.com/secret-manager/v1alpha1"

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Create custom env stack
        working-directory: ${{ env.custom_directory }}
        run: sed "s|###___ENV_NAME___###|${{ needs.prepare.outputs.env_name }}|g" main.tf.template > main.tf

      - name: Create var files
        working-directory: ${{ env.custom_directory }}
        run: jq ".environments.custom.image_tag=\"${{ needs.prepare.outputs.image_tag }}\"" ${{ env.var_file }}.template > ${{ env.var_file }}

      - name: Init terraform
        working-directory: ${{ env.custom_directory }}
        run: terraform init

      - name: Check if secret exists
        id: check_secret
        working-directory: ${{ env.custom_directory }}
        run: |
          if terraform state show 'scaleway_secret.custom' ; then
              echo "has_secret=1" >> $GITHUB_OUTPUT
          else
              echo "has_secret=0" >> $GITHUB_OUTPUT
          fi

      - name: Get CI project & secret ID
        id: ci_outputs
        if: ${{ steps.check_secret.outputs.has_secret == '0' }}
        working-directory: "${{ env.custom_directory }}/../"
        shell: bash
        run: |
          terraform init
          long_secret_id=$(terraform output -raw secret_id)
          region=$(cut -d "/" -f 1 <<< $long_secret_id)
          secret_id=$(cut -d "/" -f 2 <<< $long_secret_id)
          project_id=$(terraform output -raw project_id)
          echo "secret_id=$secret_id" >> $GITHUB_OUTPUT
          echo "project_id=$project_id" >> $GITHUB_OUTPUT
          echo "region=$region" >> $GITHUB_OUTPUT
          echo "Project ID: $project_id - Secret ID: $secret_id"

      - name: Create secret
        if: ${{ steps.check_secret.outputs.has_secret == '0' }}
        working-directory: ${{ env.custom_directory }}
        shell: bash
        run: |
          # Create secret for custom environment
          secret_id=$(curl -s -X POST \
            -H "X-Auth-Token: $SCW_SECRET_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "env-${{ needs.prepare.outputs.env_name }}",
              "project_id": "${{ steps.ci_outputs.outputs.project_id }}"
            }' \
            "${{ env.scw_endpoint }}/regions/${{ steps.ci_outputs.outputs.region }}/secrets" | jq -r ".id" )
          echo $secret_id
          # Retreive ci secret latest revision
          data=$(curl -s -X GET \
            -H "X-Auth-Token: $SCW_SECRET_KEY" \
            "${{ env.scw_endpoint }}/regions/${{ steps.ci_outputs.outputs.region }}/secrets/${{ steps.ci_outputs.outputs.secret_id }}/versions/latest_enabled/access" | jq -r ".data")
          echo "plop"
          # Create a new revision for custom environment
          curl -s -X POST \
            -H "X-Auth-Token: $SCW_SECRET_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"data\":\"${data}\"}" \
            "${{ env.scw_endpoint }}/regions/${{ steps.ci_outputs.outputs.region }}/secrets/${secret_id}/versions"

      - name: Validate terraform
        working-directory: ${{ env.custom_directory }}
        run: terraform validate -no-color

      - name: Terraform plan
        working-directory: ${{ env.custom_directory }}
        run: terraform plan -no-color -input=false -var-file="${{ env.var_file }}"

      # - name: Terraform auto-apply
      #   working-directory: ${{ env.custom_directory }}
      #   run: terraform apply -no-color -input=false -auto-approve -var-file="${{ env.var_file }}"
