name: Deploy environment

on:
  workflow_dispatch:
  pull_request:
    types: [ labeled ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  prepare:
    if: |
      (github.event_name=='pull_request' && github.event.label.name == 'deploy') ||
      (github.event_name=='workflow_dispatch' && github.event.ref != 'production' && github.event.ref != 'main')
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.config.outputs.env_name }}
      ci_registry: ${{ steps.config.outputs.ci_registry }}
      build_matrix: ${{ steps.config.outputs.build }}
      deploy_matrix: ${{ steps.config.outputs.deploy }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Get environment configuration
        env:
          BRANCH_NAME: ${{ github.event.pull_request.head.ref || github.event.ref }}
        id: config
        run: |
          # ENV_NAME
          env_name=$(node devops/scripts/get-environment-name.js ${{ env.BRANCH_NAME }})
          echo "env_name: $env_name"
          echo "env_name=$env_name" >> $GITHUB_OUTPUT

          # ENV REGISTRY
          ci_registry=$(node devops/scripts/get-environment-registry.js $env_name)
          echo "ci_registry: $ci_registry"
          echo "ci_registry=$ci_registry" >> $GITHUB_OUTPUT

          git fetch --depth=100 origin ${{ env.BRANCH_NAME }}
          git switch ${{ env.BRANCH_NAME }}

          # BUILD MATRIX
          echo "[]" \
          | jq  '. + [{name:"api", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- api packages/lib package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"apiv2", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- apiv2 packages/lib package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"app", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- app packages package-lock.json | cut -d " " -f 1)" \
          | jq  '. + [{name:"admin", tag:$tag}]' --arg tag "$(git log --max-count=1 --oneline -- admin packages package-lock.json | cut -d " " -f 1)" > build.json

          echo "Build matrix"
          cat build.json
          echo "build=$(jq -c < build.json)" >> $GITHUB_OUTPUT

          # DEPLOY MATRIX
          cat build.json > deploy.json

          echo "Deploy matrix"
          cat deploy.json
          echo "deploy=$(jq -c < deploy.json)" >> $GITHUB_OUTPUT

  create_environment:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Create environment
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node create-environment.js ${{ needs.prepare.outputs.env_name }}

      - name: Add comment to PR
        if: github.event_name == 'pull_request' && github.event.label.name == 'deploy'
        working-directory: devops/scripts
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node get-applications-endpoints.js ${{ needs.prepare.outputs.env_name }} > endpoints.json

          
          curl \
            -X POST \
            $URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data "{ \"body\": \"Application endpoints :\n\n- $(jq < endpoints.json -r '.admin')\n- $(jq < endpoints.json -r '.app')\n- $(jq < endpoints.json -r '.api')\n- $(jq < endpoints.json -r '.apiv2')\" }"

  build:
    needs: [prepare, create_environment]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Container Registry
        uses: docker/login-action@v2
        with:
          username: nologin
          password: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
          registry: ${{ needs.prepare.outputs.ci_registry }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Build image
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node build-application-docker.js --push ${{ needs.prepare.outputs.env_name }} ${{matrix.app.name}} ${{matrix.app.tag}}

  deploy:
    needs: [prepare, build, create_environment]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.deploy_matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Deploy image on Scaleway
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node deploy-scaleway.js ${{ needs.prepare.outputs.env_name }} ${{matrix.app.name}} ${{matrix.app.tag}}
