name: Create environment

on:
  workflow_dispatch:
  push:
    branches: # TODO: remove me
      - 3577-app

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.check.outputs.branch_name }}
      env_name: ${{ steps.env_name.outputs.env_name }}
      api_image_tag: ${{ steps.tags.outputs.api_image_tag }}
      apiv2_image_tag: ${{ steps.tags.outputs.apiv2_image_tag }}
      admin_image_tag: ${{ steps.tags.outputs.admin_image_tag }}
      app_image_tag: ${{ steps.tags.outputs.app_image_tag }}
      api_run_test: ${{ steps.test.outputs.api_run_test }}
      apiv2_run_test: ${{ steps.test.outputs.apiv2_run_test }}
      lib_run_test: ${{ steps.test.outputs.lib_run_test }}
      app_run_test: ${{ steps.test.outputs.app_run_test }}
      admin_run_test: ${{ steps.test.outputs.admin_run_test }}

    steps:
      - name: Check branch name
        id: check
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]] ; then
            branch_name=${{ github.head_ref }}
          else
            branch_name=${{ github.ref_name }}
          fi
          if [[ $branch_name == 'main' ]] || [[ $branch_name == 'production' ]] ; then
            echo "This action is not available on the branch $branch_name"
            exit 1
          fi
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.check.outputs.branch_name }}
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.20"

      - name: Get environment name
        id: env_name
        working-directory: devops/scripts
        run: |
          env_name=$(node get-environment-name.js ${{ steps.check.outputs.branch_name }})
          echo "env_name: $env_name"
          echo "env_name=$env_name" >> $GITHUB_OUTPUT

      - name: Get image tags
        id: tags
        run: |
          api_image_tag=$(git log --max-count=1 --oneline -- api packages/lib package-lock.json | cut -d " " -f 1)
          echo "api_image_tag: $api_image_tag"
          echo "api_image_tag=$api_image_tag" >> $GITHUB_OUTPUT

          apiv2_image_tag=$(git log --max-count=1 --oneline -- apiv2 packages/lib package-lock.json | cut -d " " -f 1)
          echo "apiv2_image_tag: $apiv2_image_tag"
          echo "apiv2_image_tag=$apiv2_image_tag" >> $GITHUB_OUTPUT

          admin_image_tag=$(git log --max-count=1 --oneline -- admin packages package-lock.json | cut -d " " -f 1)
          echo "admin_image_tag: $admin_image_tag"
          echo "admin_image_tag=$admin_image_tag" >> $GITHUB_OUTPUT

          app_image_tag=$(git log --max-count=1 --oneline -- app packages package-lock.json | cut -d " " -f 1)
          echo "app_image_tag: $app_image_tag"
          echo "app_image_tag=$app_image_tag" >> $GITHUB_OUTPUT

      - name: Create environment
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node create-environment.js ${{ steps.env_name.outputs.env_name }}

      - name: Get test configuration
        id: test
        run: |
          git switch main

          api_run_test=$(git log --max-count=1 --oneline main..${{ steps.check.outputs.branch_name }} -- api packages/lib package-lock.json)
          echo "api_run_test: $api_run_test"
          echo "api_run_test=$api_run_test" >> $GITHUB_OUTPUT

          apiv2_run_test=$(git log --max-count=1 --oneline main..${{ steps.check.outputs.branch_name }} -- apiv2 packages/lib package-lock.json)
          echo "apiv2_run_test: $apiv2_run_test"
          echo "apiv2_run_test=$apiv2_run_test" >> $GITHUB_OUTPUT

          lib_run_test=$(git log --max-count=1 --oneline main..${{ steps.check.outputs.branch_name }} -- packages package-lock.json)
          echo "lib_run_test: $lib_run_test"
          echo "lib_run_test=$lib_run_test" >> $GITHUB_OUTPUT

          app_run_test=$(git log --max-count=1 --oneline main..${{ steps.check.outputs.branch_name }} -- app packages package-lock.json)
          echo "app_run_test: $app_run_test"
          echo "app_run_test=$app_run_test" >> $GITHUB_OUTPUT

          admin_run_test=$(git log --max-count=1 --oneline main..${{ steps.check.outputs.branch_name }} -- admin packages package-lock.json)
          echo "admin_run_test: $admin_run_test"
          echo "admin_run_test=$admin_run_test" >> $GITHUB_OUTPUT

  # run_tests_api:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-api-pr.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit

  # run_tests_front:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-front.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit

  # run_tests_lib:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-lib.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit
  test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          [
            {
              name: api,
              run_test: "${{ needs.prepare.outputs.api_run_test }}",
            },
            {
              name: apiv2,
              run_test: "${{ needs.prepare.outputs.apiv2_run_test }}",
            },
            {
              name: lib,
              run_test: "${{ needs.prepare.outputs.lib_run_test }}",
            },
          ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Run tests
        uses: jenseng/dynamic-uses@v1
        if: ${{matrix.app.run_test}}
        with:
          uses: ./.github/actions/run-tests-${{matrix.app.name}}
          with: '{"branch_name": "${{ needs.prepare.outputs.branch_name }}", "CC_TEST_REPORTER_ID": "${{ secrets.CC_TEST_REPORTER_ID }}" }'

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          [
            { name: api, tag: "${{needs.prepare.outputs.api_image_tag}}" },
            { name: apiv2, tag: "${{needs.prepare.outputs.apiv2_image_tag}}" },
            { name: app, tag: "${{needs.prepare.outputs.app_image_tag}}" },
            { name: admin, tag: "${{needs.prepare.outputs.admin_image_tag}}" },
          ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.20"

      - name: Build image
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node build-application-docker.js --push ${{ needs.prepare.outputs.env_name }} ${{matrix.app.name}} ${{matrix.app.tag}}

  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          [
            { name: api, tag: "${{needs.prepare.outputs.api_image_tag}}" },
            { name: apiv2, tag: "${{needs.prepare.outputs.apiv2_image_tag}}" },
            { name: app, tag: "${{needs.prepare.outputs.app_image_tag}}" },
            { name: admin, tag: "${{needs.prepare.outputs.admin_image_tag}}" },
          ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.20"

      - name: Deploy image on Scaleway
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node deploy-scaleway.js ${{ needs.prepare.outputs.env_name }} ${{matrix.app.name}} ${{matrix.app.tag}}
