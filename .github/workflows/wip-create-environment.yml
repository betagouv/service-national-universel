name: Create environment

on:
  workflow_dispatch:
  push:
    branches: # TODO: remove me
      - 3577-app

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.check.outputs.branch_name }}
      env_name: ${{ steps.prepare.outputs.env_name }}
      api_image_tag: ${{ steps.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ steps.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ steps.prepare.outputs.app_image_tag }}

    steps:
      - name: Check branch name
        id: check
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]] ; then
            branch_name=${{ github.head_ref }}
          else
            branch_name=${{ github.ref_name }}
          fi
          if [[ $branch_name == 'main' ]] || [[ $branch_name == 'production' ]] ; then
            echo "This action is not available on the branch $branch_name"
            exit 1
          fi
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.check.outputs.branch_name }}
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.20"

      - name: Prepare
        id: prepare
        working-directory: devops/scripts
        run: |
          env_name=$(node get-environment-name.js ${{ steps.check.outputs.branch_name }})
          echo "env_name: $env_name"
          echo "env_name=$env_name" >> $GITHUB_OUTPUT

          api_image_tag=$(git log --max-count=1 --oneline -- api packages package-lock.json | cut -d " " -f 1)
          echo "api_image_tag: $api_image_tag"
          echo "api_image_tag=$api_image_tag" >> $GITHUB_OUTPUT

          admin_image_tag=$(git log --max-count=1 --oneline -- admin packages package-lock.json | cut -d " " -f 1)
          echo "admin_image_tag: $admin_image_tag"
          echo "admin_image_tag=$admin_image_tag" >> $GITHUB_OUTPUT

          app_image_tag=$(git log --max-count=1 --oneline -- app packages package-lock.json | cut -d " " -f 1)
          echo "app_image_tag: $app_image_tag"
          echo "app_image_tag=$app_image_tag" >> $GITHUB_OUTPUT

      - name: Create environment
        working-directory: devops/scripts
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node create-environment.js ${{ steps.prepare.outputs.env_name }}

  # run_tests_api:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-api-pr.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit

  # run_tests_front:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-front.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit

  # run_tests_lib:
  #   needs: prepare
  #   uses: ./.github/workflows/run-tests-lib.yml
  #   with:
  #     branch_name: ${{ needs.prepare.outputs.branch_name }}
  #   secrets: inherit

  build:
    needs: prepare
    runs-on: ubuntu-latest
    env:
      SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
      SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
    strategy:
      matrix:
        app:
          [
            {
              name: api,
              env:
                {
                  RELEASE: "${{needs.prepare.outputs.api_image_tag}}",
                  ENVIRONMENT: "${{ needs.prepare.outputs.env_name }}",
                },
            },
            {
              name: app,
              env:
                {
                  VITE_RELEASE: "${{needs.prepare.outputs.app_image_tag}}",
                  VITE_ENVIRONMENT: "${{ needs.prepare.outputs.env_name }}",
                },
            },
            {
              name: admin,
              env:
                {
                  VITE_RELEASE: "${{needs.prepare.outputs.admin_image_tag}}",
                  VITE_ENVIRONMENT: "${{ needs.prepare.outputs.env_name }}",
                },
            },
          ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.branch_name }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.20"

      - name: Build image environment
        working-directory: devops/scripts
        env: ${{matrix.app.env}}
        run: |
          node build-application-docker.js --push ${{ needs.prepare.outputs.env_name }} ${{matrix.app.name}}
