name: Test and deploy CI

on:
  workflow_dispatch:
  push:
    branches:
      # - main
      - poc-ci-no-ci

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref_name }}
#   cancel-in-progress: true


env:
  APP_NAME: all
  CI_REGISTRY: rg.fr-par.scw.cloud/snu-ci

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.config.outputs.test }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Get matrices configuration
        id: config
        run: |
          # TEST MATRIX
          echo "[]" \
          | jq  '. + [{name:"api"}]' \
          | jq  '. + [{name:"apiv2"}]' \
          | jq  '. + [{name:"app"}]' \
          | jq  '. + [{name:"admin"}]' \
          | jq  '. + [{name:"lib"}]' > test.json

          echo "Test matrix"
          cat test.json
          echo "test=$(jq -c < test.json)" >> $GITHUB_OUTPUT

  test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.test_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Run tests
        uses: jenseng/dynamic-uses@v1
        with:
          uses: ./.github/actions/run-tests-${{matrix.app.name}}
          with: '{"branch_name": "${{ github.ref_name }}", "CC_TEST_REPORTER_ID": "${{ secrets.CC_TEST_REPORTER_ID }}" }'

  build:
    # needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
          registry: ${{ env.CI_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Get build secrets
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node devops/scripts/get-secrets.js snu-ci snu-ci-build > build.env

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          file: devops/ci/Dockerfile
          tags: ${{ env.CI_REGISTRY }}/${{ env.APP_NAME }}:latest,${{ env.CI_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}
          build-args: |
            "RELEASE=${{ github.sha }}"
            "ENVIRONMENT=ci"
          secret-files: |
            "BUILD_SECRETS=./build.env"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          sudo chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod go-rwx ~/.ssh/id_ed25519
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Push
        run: |
          mkdir docker
          cd docker
          image_tag=${{ env.CI_REGISTRY }}/${{ env.APP_NAME }}:latest
          echo "FROM $image_tag" > Dockerfile
          git init
          git config user.email "github.deployer@gmail.com"
          git config user.name "Github Deployer"
          git remote add cloud "${{ secrets.CLEVER_CLOUD_GIT_REMOTE_CI }}"
          git add -A
          git commit -m "For deploy"
          git push -f -u cloud master
