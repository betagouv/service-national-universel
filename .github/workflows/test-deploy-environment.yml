name: Test and deploy environment

on:
  workflow_dispatch:
  push:
    branches:
      - poc-ci-no-ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CI_REGISTRY: rg.fr-par.scw.cloud/snu-ci

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.env_config.outputs.env_name }}
      image_tag: ${{ steps.env_config.outputs.image_tag }}
      # test_matrix: ${{ steps.config.outputs.test }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Get environment config
        id: env_config
        working-directory: devops/scripts
        run: |
          env_name=$(node get-environment-name.js ${{ github.ref_name }})
          echo "env_name: $env_name"
          echo "env_name=$env_name" >> $GITHUB_OUTPUT

          image_tag=${{ env.CI_REGISTRY }}/all:$(node get-image-tag.js ${{ github.sha }})
          echo "image_tag: $image_tag"
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

      # - name: Get matrices configuration
      #   id: config
      #   run: |
      #     # TEST MATRIX
      #     git switch main

      #     echo "[]" \
      #     | jq  '. + [{name:"api", run_test:$tag}]' --arg tag "$(git log --max-count=1 --oneline main..${{ github.ref_name }} -- api packages/lib package-lock.json | cut -d " " -f 1)" \
      #     | jq  '. + [{name:"apiv2", run_test:$tag}]' --arg tag "$(git log --max-count=1 --oneline main..${{ github.ref_name }} -- apiv2 packages/lib package-lock.json | cut -d " " -f 1)" \
      #     | jq  '. + [{name:"app", run_test:$tag}]' --arg tag "$(git log --max-count=1 --oneline main..${{ github.ref_name }} -- app packages package-lock.json | cut -d " " -f 1)" \
      #     | jq  '. + [{name:"admin", run_test:$tag}]' --arg tag "$(git log --max-count=1 --oneline main..${{ github.ref_name }} -- admin packages package-lock.json | cut -d " " -f 1)" \
      #     | jq  '. + [{name:"lib", run_test:$tag}]' --arg tag "$(git log --max-count=1 --oneline main..${{ github.ref_name }} -- packages package-lock.json | cut -d " " -f 1)" > test.json

      #     echo "Test matrix"
      #     cat test.json
      #     echo "test=$(jq -c < test.json)" >> $GITHUB_OUTPUT

  # test:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       app: ${{ fromJSON(needs.prepare.outputs.test_matrix) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.ref_name }}

  #     - name: Run tests
  #       uses: jenseng/dynamic-uses@v1
  #       if: ${{matrix.app.run_test}}
  #       with:
  #         uses: ./.github/actions/run-tests-${{matrix.app.name}}
  #         with: '{"branch_name": "${{ github.ref_name }}", "CC_TEST_REPORTER_ID": "${{ secrets.CC_TEST_REPORTER_ID }}" }'

  build:
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Login to Docker Container Registry
        uses: docker/login-action@v2
        with:
          username: nologin
          password: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
          registry: ${{ env.CI_REGISTRY }}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17"

      - name: Build image
        working-directory: devops
        env:
          SCW_ORGANIZATION_ID: ${{ secrets.SCW_ORGANIZATION_ID }}
          SCW_SECRET_KEY: ${{ secrets.SCW_CI_DEPLOY_SECRET_KEY }}
        run: |
          node scripts/get-secrets snu-ci snu-ci-build > build.env
          node ci/build-application-docker.js --push ${{ needs.prepare.outputs.image_tag }} build.env
          rm build.env

  deploy:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJSON(needs.prepare.outputs.deploy_matrix) }}

    steps:
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          sudo chmod 600 ~/.ssh/id_ed25519
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod go-rwx ~/.ssh/id_ed25519
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Push
        env:
          CLEVER_CLOUD_GIT_REMOTE: git+ssh://git@push-n3-par-clevercloud-customers.services.clever-cloud.com/app_5a1eab2e-8dfe-4473-8305-64a6739c7bd4.git
        run: |
          mkdir docker
          cd docker
          image_tag=${{ needs.prepare.outputs.image_tag }}
          echo "FROM $image_tag" > Dockerfile
          git init
          git config user.email "github.deployer@gmail.com"
          git config user.name "Github Deployer"
          git remote add cloud "$CLEVER_CLOUD_GIT_REMOTE"
          git add -A
          git commit -m "For deploy"
          git push -f -u cloud master