name: Build and deploy Production Hotfix

on:
  push:
    branches:
      - production_hotfix

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  prod_directory: ./terraform/environments/production
  staging_directory: ./terraform/environments/production/staging
  production_branch: "production"

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.ref_name == 'production_hotfix'

    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      api_image_tag: ${{ steps.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ steps.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ steps.prepare.outputs.app_image_tag }}
      antivirus_image_tag: ${{ steps.prepare.outputs.antivirus_image_tag }}

    steps:
      - name: Get target_branch
        id: target_branch
        run: |
          echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.target_branch.outputs.target_branch }}
          fetch-depth: 0

      - name: Check differences
        run: |
          git fetch origin ${{ env.production_branch }}
          diff=$(git --no-pager diff --no-patch --raw origin/${{ env.production_branch }})
          if [[ "$diff" ]]
          then
            echo "https://github.com/betagouv/service-national-universel/compare/${{ env.production_branch }}...${{ steps.target_branch.outputs.target_branch }}"
            echo "$diff"
          else
            echo "No difference with ${{ env.production_branch }} branch. Aborting"
            exit 1
          fi

      - name: Prepare
        id: prepare
        run : |
          api_image_tag=$(git log --max-count=1 --oneline -- api packages | cut -d " " -f 1)
          echo "api_image_tag: $api_image_tag"
          echo "api_image_tag=$api_image_tag" >> $GITHUB_OUTPUT

          admin_image_tag=$(git log --max-count=1 --oneline -- admin packages | cut -d " " -f 1)
          echo "admin_image_tag: $admin_image_tag"
          echo "admin_image_tag=$admin_image_tag" >> $GITHUB_OUTPUT

          app_image_tag=$(git log --max-count=1 --oneline -- app packages | cut -d " " -f 1)
          echo "app_image_tag: $app_image_tag"
          echo "app_image_tag=$app_image_tag" >> $GITHUB_OUTPUT

          antivirus_image_tag=$(git log --max-count=1 --oneline -- antivirus | cut -d " " -f 1)
          echo "antivirus_image_tag: $antivirus_image_tag"
          echo "antivirus_image_tag=$antivirus_image_tag" >> $GITHUB_OUTPUT

  run_tests_api:
    needs: prepare
    uses: ./.github/workflows/run-tests-api.yml
    with:
      branch_name: ${{ needs.prepare.outputs.target_branch }}
    secrets: inherit

  build:
    needs: [prepare, run_tests_api]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [
          {name: api, tag: "${{needs.prepare.outputs.api_image_tag}}" },
          {name: app, tag: "${{needs.prepare.outputs.app_image_tag}}" },
          {name: admin, tag: "${{needs.prepare.outputs.admin_image_tag}}" },
          {name: antivirus, tag: "${{needs.prepare.outputs.antivirus_image_tag}}" },
        ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - name: Check if image exists
        id: check
        uses: ./.github/actions/check_docker_image_tag
        with:
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app.name }}
          image_tag: ${{ matrix.app.tag }}
          secret_key: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}

      - name: Docker Build & Publish
        uses: ./.github/actions/build_docker_image
        if: steps.check.outputs.tag_exists == 0
        with:
          username: nologin
          password: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
          registry: ${{ secrets.SCW_PROD_IMAGE_REGISTRY }}
          image_name: ${{ matrix.app.name }}
          dockerfile_path: ${{ matrix.app.name }}/Dockerfile
          image_tag: ${{ matrix.app.tag }}
          image_tag_stable: hotfix

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.staging_directory }}
        run: terraform init

      - name: Staging - Terraform plan
        id: plan
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}"

      - name: Staging - Terraform auto-apply
        working-directory: ${{ env.staging_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}"

      - name: Staging - Healthcheck API
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Staging - Healthcheck Admin
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Staging - Healthcheck App
        working-directory: ${{ env.staging_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  plan_production:
    runs-on: ubuntu-latest
    needs: [prepare, deploy_staging]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform plan
        id: plan
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform plan -no-color -input=false \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}" \
            -var="antivirus_image_tag=${{ needs.prepare.outputs.antivirus_image_tag }}"

  deploy_production:
    runs-on: ubuntu-latest
    environment: production # Needed for manual approval before deploy
    needs: [prepare, plan_production]
    env:
      SCW_ACCESS_KEY: ${{ secrets.SCW_PROD_DEPLOY_ACCESS_KEY }}
      SCW_SECRET_KEY: ${{ secrets.SCW_PROD_DEPLOY_SECRET_KEY }}
      PG_CONN_STR: ${{ secrets.SCW_PROD_BACKEND_CONN_STR }}
      PGUSER: ${{ secrets.SCW_PROD_BACKEND_USER }}
      PGPASSWORD: ${{ secrets.SCW_PROD_BACKEND_PASSWORD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.target_branch }}

      - uses: hashicorp/setup-terraform@v3

      - name: Init terraform
        working-directory: ${{ env.prod_directory }}
        run: terraform init

      - name: Production - Terraform apply
        working-directory: ${{ env.prod_directory }}
        run: |
          terraform apply -no-color -input=false -auto-approve \
            -var="api_image_tag=${{ needs.prepare.outputs.api_image_tag }}" \
            -var="admin_image_tag=${{ needs.prepare.outputs.admin_image_tag }}" \
            -var="app_image_tag=${{ needs.prepare.outputs.app_image_tag }}" \
            -var="antivirus_image_tag=${{ needs.prepare.outputs.antivirus_image_tag }}"

      - name: Production - Healthcheck API
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw api_endpoint)"

      - name: Production - Healthcheck Admin
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw admin_endpoint)"

      - name: Production - Healthcheck App
        working-directory: ${{ env.prod_directory }}
        run: curl -I "$(terraform output -raw app_endpoint)"

  deploy_cc:
    needs: [prepare, build]
    if: ${{ vars.DEPLOY_ON_CC == 'true' }}
    uses: ./.github/workflows/cc-deploy-production.yml
    with:
      api_image_tag: ${{ needs.prepare.outputs.api_image_tag }}
      admin_image_tag: ${{ needs.prepare.outputs.admin_image_tag }}
      app_image_tag: ${{ needs.prepare.outputs.app_image_tag }}
    secrets: inherit
